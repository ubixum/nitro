#!/usr/bin/env python3

import nitro

import sys, os

def print_usage():
    print("Usage: diconv <input filename> <output filename>")
    exit()

def get_extension(filename):
    return filename.split(os.path.extsep)[-1]

def RstWriter(di, out):

    """
        Write terminals and registers to text file.
    """

    # register, address, width, initial value, comment
    table_bars = ('='*30+' ')*5
    def write_header():
        out.write('\n' + table_bars + '\n' )
        out.write( ('{:<31}' *5 ).format ( 'register', 'address', 'width', 'initial', 'comment' ) )
        out.write('\n' + table_bars + '\n' ) 
        

    for t in list(di.keys()):
        term=di[t]
        title = '%s (Address %s)' % (t, hex(term.addr))
        out.write('\n\n'+title+'\n')
        out.write('+'*len(title)+'\n\n') 
        if len(term.comment):
            out.write('\n%s\n\n' % term.comment )

        need_close=False
        if len(list(term.keys())):
            write_header()
            for i,r in enumerate(term.keys()):
                out.write( ('{:<31}' *5 ).format ( r, hex(term[r].addr), term[r].width, hex(term[r].init),
                                                   term[r].comment.replace('\n',' ') ) + '\n' )
                need_close=True
                if term[r].num_children(): # subregisters
                    out.write(table_bars+'\n\n')
                    need_close=False
                    subreg_bars = (' '*4 + '='*30+' ') * 4 + '\n'
                    out.write ('    **%s bits**\n\n' % r )
                    out.write ( subreg_bars ) 
                    out.write ( ('    {:<31}' * 4 + '\n' ).format ( 'name', 'bits', 'initial', 'comment' ) )
                    out.write ( subreg_bars ) 
                    for k in list(term[r].keys()):
                        s=term[r][k]
                        bits = '[%d:%d]' % ( 
                            s.width+s.addr-1,
                            s.addr )
                        out.write(('    {:<31}'*4 + '\n').format ( s.name, bits, s.init, s.comment ) )
                    out.write(subreg_bars)

                    # re-open register table if not the last register 
                    if i<term.num_children()-1:
                        out.write ( '\n' ) 
                        write_header()
                    
            if need_close:
                out.write(table_bars + '\n')

    out.write('\n')

if __name__ == '__main__':

    if len(sys.argv) != 3:
        print_usage()

    ifile = sys.argv[1]
    ofile = sys.argv[2]
    
    itype = get_extension(ifile)
    otype = get_extension(ofile)
    
    
    if itype == "py":
        d=dict()
        #execfile(ifile, d)
        exec(compile(open(ifile, "rb").read(), ifile, 'exec'), d)
        di = d["di"]
    elif itype == "xml":
        x = nitro.XmlReader(ifile)
        di = nitro.DeviceInterface("DI")
        x.read(di)
    else:
        raise Exception("Don't know how to convert input file type '%s'" % itype)
    
    if otype == "xml":
        x = nitro.XmlWriter(ofile)
        x.write(di)
    elif otype in ['txt','rst']:
        out=open(ofile,'w')
        RstWriter(di,out)            
    else:
        raise Exception("Don't know how to convert output file type '%s'" % otype)
